rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows reading any post, but restricts modification/deletion to the original author.
     * @path /posts/{postId}
     * @allow (get, list): Any user can read any post.
     * @allow (create): Only an authenticated user can create a post. The authorId field must match the user's UID.
     * @allow (update, delete): Only the author of the post can modify or delete it.
     * @deny create: if the authorId in the request does not match the authenticated user's UID.
     * @deny update: if the authorId is changed during an update.
     * @deny update, delete: if the post does not exist.
     * @deny: if unauthenticated user try to modify or delete post.
     * @principle Public Read with Owner-Only Writes
     */
    match /posts/{postId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update, delete: if isSignedIn() && isOwner(resource.data.authorId);

      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }
    }

    /**
     * @description Allows reading comments associated with a post, but restricts creation/modification/deletion to the original author.
     * @path /posts/{postId}/comments/{commentId}
     * @allow (get, list): Any user can read any comment.
     * @allow (create): Only an authenticated user can create a comment. The authorId field must match the user's UID.
     * @allow (update, delete): Only the author of the comment can modify or delete it.
     * @deny create: if the authorId in the request does not match the authenticated user's UID.
     * @deny update: if the authorId is changed during an update.
     * @deny update, delete: if the comment does not exist.
     * @principle Public Read with Owner-Only Writes
     */
    match /posts/{postId}/comments/{commentId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update, delete: if isSignedIn() && isOwner(resource.data.authorId);

      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }
    }

    /**
     * @description Allows a user to read and modify their own profile.
     * @path /users/{userId}
     * @allow (get): Any user can read any profile.
     * @allow (create): Only the user can create their own profile.
     * @allow (update, delete): Only the user can modify or delete their own profile.
     * @deny create: if the userId in the path does not match the authenticated user's UID.
     * @deny update, delete: if the user profile does not exist or if another user attempts to modify it.
     * @principle Ownership
     */
    match /users/{userId} {
      allow get: if true;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update, delete: if isSignedIn() && request.auth.uid == userId;

      function isSignedIn() {
        return request.auth != null;
      }
    }

    /**
     * @description Allows reading any bottle, but restricts modification/deletion to the original author.
     * @path /bottles/{bottleId}
     * @allow (get, list): Any user can read any bottle.
     * @allow (create): Only an authenticated user can create a bottle. The authorId field must match the user's UID.
     * @allow (update, delete): Only the author of the bottle can modify or delete it.
     * @deny create: if the authorId in the request does not match the authenticated user's UID.
     * @deny update: if the authorId is changed during an update.
     * @deny update, delete: if the bottle does not exist.
     * @principle Public Read with Owner-Only Writes
     */
    match /bottles/{bottleId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update, delete: if isSignedIn() && isOwner(resource.data.authorId);

      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }
    }

    /**
     * @description Allows reading any wall message, but restricts modification/deletion to the original author.
     * @path /wallMessages/{messageId}
     * @allow (get, list): Any user can read any wall message.
     * @allow (create): Only an authenticated user can create a wall message. The authorId field must match the user's UID.
     * @allow (update, delete): Only the author of the wall message can modify or delete it.
     * @deny create: if the authorId in the request does not match the authenticated user's UID.
     * @deny update: if the authorId is changed during an update.
     * @deny update, delete: if the wall message does not exist.
     * @principle Public Read with Owner-Only Writes
     */
    match /wallMessages/{messageId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update, delete: if isSignedIn() && isOwner(resource.data.authorId);

      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }
    }
  }
}