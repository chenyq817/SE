/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a user-ownership model for posts and comments.
 *
 * Data Structure:
 * - /posts/{postId}: Posts created by users.
 * - /comments/{commentId}: Comments on posts.
 *
 * Key Security Decisions:
 * - Users can only delete their own posts.
 * - Users can only create comments.
 * - No listing of comments or posts by non-owners is allowed.
 *
 * Denormalization for Authorization:
 * - Posts and comments include an `authorId` field to simplify ownership checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to individual post documents.
     * @path /posts/{postId}
     * @allow (delete) User with auth UID 'user_abc' can delete a post if post.authorId == 'user_abc'.
     * @deny (delete) User with auth UID 'user_xyz' cannot delete post because user_xyz != post.authorId.
     * @allow (create) User with auth UID 'user_abc' can create a post. The post.authorId must equal user_abc.
     * @deny (create) User with auth UID 'user_abc' cannot create a post where post.authorId does not equal user_abc.
     * @principle Enforces document ownership for writes.
     */
    match /posts/{postId} {
      // Allow anyone to read posts.
      allow get, list: if true;

      // Only allow the author to create, update, and delete posts.
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update, delete: if isSignedIn() && isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Controls access to individual comment documents.
     * @path /comments/{commentId}
     * @allow (create) User with auth UID 'user_abc' can create a comment. comment.authorId must be equal to user_abc.
     * @deny (create) User with auth UID 'user_abc' cannot create a comment where comment.authorId does not equal user_abc.
     * @principle Enforces document ownership for writes.
     */
    match /comments/{commentId} {
      // Allow anyone to read comments.
      allow get, list: if true;

      // Only allow the author to create, update, and delete comments.
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update, delete: if isSignedIn() && isExistingOwner(resource.data.authorId);
    }

    // ---- Helper functions ----

    // Checks if the user is signed in.
    function isSignedIn() {
      return request.auth != null;
    }

    // Checks if the user is the owner of the resource.
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Checks if the user is the owner of the resource and the resource exists.
    function isExistingOwner(userId) {
        return isSignedIn() && isOwner(userId) && resource != null;
    }
  }
}