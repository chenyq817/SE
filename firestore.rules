rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own profile if the userId matches their auth.uid.
     * @allow (get, list) - Any user can read any profile.
     * @allow (update, delete) - Only the user who owns the profile can update or delete it.
     * @deny (create) - If the user is not authenticated.
     * @deny (update, delete) - If the user attempts to modify someone else's profile.
     * @principle Enforces document ownership for writes and public read access.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }

      allow get: if true;
      allow list: if true;

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == request.auth.uid;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to posts in the social circle.
     * @path /posts/{postId}
     * @allow (get, list) - Any user can read any post.
     * @allow (create) - Authenticated user can create a post and authorId in data matches auth.uid.
     * @allow (update, delete) - Only the author of the post can update or delete it.
     * @deny (create) - If the user is not authenticated or authorId does not match auth.uid.
     * @deny (update, delete) - If a user attempts to modify someone else's post.
     * @principle Enforces document ownership for writes and public read access.
     */
    match /posts/{postId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if true;
      allow list: if true;

      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.authorId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.authorId == request.auth.uid;
    }

    /**
     * @description Controls access to comments on a specific post.
     * @path /posts/{postId}/comments/{commentId}
     * @allow (get, list) - Any user can read any comment.
     * @allow (create) - Authenticated user can create a comment and authorId in data matches auth.uid.
     * @allow (update, delete) - Only the author of the comment can update or delete it.
     * @deny (create) - If the user is not authenticated or authorId does not match auth.uid.
     * @deny (update, delete) - If a user attempts to modify someone else's comment.
     * @principle Enforces document ownership for writes and public read access.
     */
    match /posts/{postId}/comments/{commentId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if true;
      allow list: if true;

      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.authorId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.authorId == request.auth.uid;
    }

    /**
     * @description Controls access to wall messages.
     * @path /wallMessages/{messageId}
     * @allow (get, list) - Any user can read any wall message.
     * @allow (create) - Authenticated user can create a wall message and authorId in data matches auth.uid.
     * @allow (update, delete) - Only the author of the wall message can update or delete it.
     * @deny (create) - If the user is not authenticated or authorId does not match auth.uid.
     * @deny (update, delete) - If a user attempts to modify someone else's wall message.
     * @principle Enforces document ownership for writes and public read access.
     */
    match /wallMessages/{messageId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if true;
      allow list: if true;

      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.authorId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.authorId == request.auth.uid;
    }

    /**
     * @description Controls access to chat metadata.
     * @path /chats/{chatId}
     * @allow (get, list) - Only participants in the chat can read the chat metadata.
     * @allow (create) - Authenticated user can create the chat if they are a participant.
     * @allow (update, delete) - Only participants can update or delete the chat.
     * @deny (create) - If the user is not authenticated or is not a participant.
     * @deny (update, delete) - If a user attempts to modify a chat they don't participate in.
     * @principle Enforces shared access for private chat sessions.
     */
    match /chats/{chatId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && request.auth.uid in resource.data.participantIds;
      allow list: if isSignedIn() && request.auth.uid in resource.data.participantIds;

      allow create: if isSignedIn() && request.resource.data.participantIds.hasAll([request.auth.uid]);
      allow update: if isSignedIn() && request.resource.data.participantIds.hasAll([request.auth.uid]);
      allow delete: if isSignedIn() && request.resource.data.participantIds.hasAll([request.auth.uid]);
    }

    /**
     * @description Controls access to chat messages within a specific chat.
     * @path /chats/{chatId}/messages/{messageId}
     * @allow (get, list) - Only participants in the chat can read the messages.
     * @allow (create) - Authenticated user can create a message in a chat they participate in and senderId in data matches auth.uid.
     * @allow (update, delete) - No updates or deletes are allowed on messages after creation.
     * @deny (create) - If the user is not authenticated, is not a participant, or senderId does not match auth.uid.
     * @principle Enforces shared access for private chat sessions and message immutability.
     */
    match /chats/{chatId}/messages/{messageId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isParticipant(chatId) {
          return request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participantIds;
      }

      allow get: if isSignedIn() && isParticipant(chatId);
      allow list: if isSignedIn() && isParticipant(chatId);

      allow create: if isSignedIn() && isParticipant(chatId) && request.resource.data.senderId == request.auth.uid;
      allow update: if false;
      allow delete: if false;
    }
  }
}