/**
 * @file Firestore Security Rules
 * @version 2
 *
 * @description
 * This ruleset enforces a social circle application with user-generated content (posts, comments, bottles, wall messages),
 * along with user profiles. The core security model revolves around:
 *   - Public Read with Owner-Only Writes for top-level collections such as posts, bottles and wall messages.
 *   - Owner-Only access for user profiles.
 *   - Posts and Comments are publicly readable.
 *
 * Data Structure:
 *   - /posts/{postId}: Posts created by users.
 *   - /posts/{postId}/comments/{commentId}: Comments associated with posts.
 *   - /users/{userId}: User profile information.
 *   - /bottles/{bottleId}: Messages in bottles.
 *   - /wallMessages/{messageId}: Public wall messages.
 *
 * Key Security Decisions:
 *   - Users can only update or delete their own posts, bottles, wall messages, and profiles.
 *   - Posts, Bottles, and WallMessages are publicly readable, but only the owner can modify or delete them.
 *   - User profiles are private and only accessible by the user themselves.
 *   - Listing of user profiles is disallowed to protect user privacy.
 *
 * Denormalization for Authorization:
 *   - Posts, Bottles, WallMessages have an `authorId` field which is used to authorize writes.
 *
 * Structural Segregation:
 *   - Public content (posts, bottles, wall messages) is stored in top-level collections, while private user data (profiles) is stored under `/users/{userId}`.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Defines whether a user is signed in.
     * @return {boolean} True if the request is authenticated, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Defines whether the request is made by the owner of the document.
     * @param {string} userId - The user ID to compare with the request's auth UID.
     * @return {boolean} True if the request is authenticated and the user ID matches the provided user ID, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Defines whether the request is made by the owner of the existing document.
     * @param {string} userId - The user ID to compare with the resource's authorId.
     * @return {boolean} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for the /posts collection.
     * @path /posts/{postId}
     * @allow (get, list): Any user can read any post.
     * @allow (create): A user can create a post if the authorId matches their UID.
     * @allow (update, delete): Only the author of the post can update or delete it.
     * @deny (create): A user cannot create a post if the authorId does not match their UID.
     * @deny (update, delete): A non-author cannot update or delete a post.
     * @principle Public Read with Owner-Only Writes: Allows public read access while restricting write access to the owner of the post.
     */
    match /posts/{postId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update, delete: if isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Rules for the /posts/{postId}/comments collection.
     * @path /posts/{postId}/comments/{commentId}
     * @allow (get, list): Any user can read any comment.
     * @allow (create): A user can create a comment if the authorId matches their UID.
     * @allow (update, delete): Only the author of the comment can update or delete it.
     * @deny (create): A user cannot create a comment if the authorId does not match their UID.
     * @deny (update, delete): A non-author cannot update or delete a comment.
     * @principle Public Read with Owner-Only Writes: Allows public read access while restricting write access to the owner of the comment.
     */
    match /posts/{postId}/comments/{commentId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update, delete: if isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Rules for the /users collection.
     * @path /users/{userId}
     * @allow (get, create, update, delete): Only the user with the matching userId can access their profile.
     * @deny (list): Listing users is not allowed.
     * @principle Ownership: Enforces strict user-ownership; users can only access their own profile data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
      allow list: if false;
    }

    /**
     * @description Rules for the /bottles collection.
     * @path /bottles/{bottleId}
     * @allow (get, list): Any user can read any bottle.
     * @allow (create): A user can create a bottle if the authorId matches their UID.
     * @allow (update, delete): Only the author of the bottle can update or delete it.
     * @deny (create): A user cannot create a bottle if the authorId does not match their UID.
     * @deny (update, delete): A non-author cannot update or delete a bottle.
     * @principle Public Read with Owner-Only Writes: Allows public read access while restricting write access to the owner of the bottle.
     */
    match /bottles/{bottleId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update, delete: if isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Rules for the /wallMessages collection.
     * @path /wallMessages/{messageId}
     * @allow (get, list): Any user can read any wall message.
     * @allow (create): A user can create a wall message if the authorId matches their UID.
     * @allow (update, delete): Only the author of the wall message can update or delete it.
     * @deny (create): A user cannot create a wall message if the authorId does not match their UID.
     * @deny (update, delete): A non-author cannot update or delete a wall message.
     * @principle Public Read with Owner-Only Writes: Allows public read access while restricting write access to the owner of the wall message.
     */
    match /wallMessages/{messageId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update, delete: if isExistingOwner(resource.data.authorId);
    }
  }
}