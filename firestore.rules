rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own profile data.
     * @path /users/{userId}
     * @allow (get, list) if isOwner(userId)
     * @allow (create, update, delete) if isOwner(userId)
     * @deny (get, list) if !isSignedIn()
     * @deny (create, update, delete) if !isSignedIn()
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      // Function to check if the request is from the owner
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Allows anyone to read posts, but only the author can create, update, or delete them.
     * @path /posts/{postId}
     * @allow (get, list) if true
     * @allow (create) if request.auth.uid == request.resource.data.authorId
     * @allow (update, delete) if resource.data.authorId == request.auth.uid
     * @deny (create) if request.auth.uid != request.resource.data.authorId
     * @deny (update, delete) if resource.data.authorId != request.auth.uid
     * @principle Allows public reads, enforces document ownership for writes.
     */
    match /posts/{postId} {
      function isOwner(authorId) {
        return request.auth.uid == authorId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow delete: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
    }

    /**
     * @description Allows only authenticated users to create comments.
     * @path /posts/{postId}/comments/{commentId}
     * @allow (create) if request.auth.uid == request.resource.data.authorId
     * @allow (get, list) if true
     * @deny (create) if request.auth.uid != request.resource.data.authorId
     * @principle Enforces that only authenticated users can create comments.
     */
    match /posts/{postId}/comments/{commentId} {
      function isOwner(authorId) {
        return request.auth.uid == authorId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow delete: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
    }
    /**
     * @description Allows anyone to read bottles, but only the author can create, update, or delete them.
     * @path /bottles/{bottleId}
     * @allow (get, list) if true
     * @allow (create) if request.auth.uid == request.resource.data.authorId
     * @allow (update, delete) if resource.data.authorId == request.auth.uid
     * @deny (create) if request.auth.uid != request.resource.data.authorId
     * @deny (create) if request.auth.uid != request.resource.data.authorId
     * @deny (update, delete) if resource.data.authorId != request.auth.uid
     * @principle Allows public reads, enforces document ownership for writes.
     */
    match /bottles/{bottleId} {
       function isOwner(authorId) {
        return request.auth.uid == authorId;
      }

      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow delete: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
    }

    /**
     * @description Allows anyone to read wall messages, but only the author can create, update, or delete them.
     * @path /wallMessages/{messageId}
     * @allow (get, list) if true
     * @allow (create) if request.auth.uid == request.resource.data.authorId
     * @allow (update, delete) if resource.data.authorId == request.auth.uid
     * @deny (create) if request.auth.uid != request.resource.data.authorId
     * @deny (update, delete) if resource.data.authorId != request.auth.uid
     * @principle Allows public reads, enforces document ownership for writes.
     */
    match /wallMessages/{messageId} {
      function isOwner(authorId) {
        return request.auth.uid == authorId;
      }

      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow delete: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
    }
  }
}