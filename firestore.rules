/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset prioritizes user data protection by enforcing strict ownership for user profiles and
 * read-only access to public content. It uses denormalization to efficiently validate user authorization
 * without complex queries.
 *
 * Data Structure:
 * - /users/{userId}: User profile information, accessible only to the user themselves.
 * - /posts/{postId}: Public posts created by users. Anyone can read, but only the author can modify.
 * - /posts/{postId}/comments/{commentId}: Comments associated with a post. Only the author can modify the comment, and only authenticated users can create new comments.
 * - /bottles/{bottleId}: Publicly accessible messages in bottles.
 * - /wallMessages/{messageId}: Publicly accessible messages on the community wall.
 *
 * Key Security Decisions:
 * - User profiles are strictly private and accessible only to the owning user.
 * - Posts, bottles, and wall messages are publicly readable.
 * - Only authenticated users can create comments
 * - Only the author can update/delete comments
 *
 * Denormalization for Authorization:
 * - The `posts` collection requires an `authorId` field to determine ownership for updates and deletes.
 * - The `comments` collection requires both the post's `postId` and the comment's `authorId` to secure writes.
 *
 * Structural Segregation:
 * - User profile data is stored in the `/users/{userId}` collection, ensuring clear ownership and preventing accidental public exposure.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the current user is signed in.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Verifies user authentication.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the current user is the owner of the resource.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Enforces ownership-based access control.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the current user is the owner of an existing resource.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Ensures that only owners can modify or delete existing documents.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rule for the /posts/{postId} collection.
     * @path /posts/{postId}
     * @allow (get, list): Any user can read any post.
     * @allow (create): Any authenticated user can create a post where authorId matches their UID.
     * @allow (update, delete): Only the author of the post can update or delete it.
     * @deny (create): Non-authenticated user cannot create a post.
     * @deny (update, delete): A user cannot update or delete a post they don't own.
     * @principle Public read, owner-only write access for posts.
     */
    match /posts/{postId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update, delete: if isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Rules for the /posts/{postId}/comments/{commentId} subcollection.
     * @path /posts/{postId}/comments/{commentId}
     * @allow (get, list): Any user can read any comment on any post.
     * @allow (create): Any authenticated user can create a comment on a post. The authorId must match the user's UID.
     * @allow (update, delete): Only the author of the comment can update or delete it.
     * @deny (create): Non-authenticated user cannot create a comment.
     * @deny (update, delete): A user cannot update or delete a comment they don't own.
     * @principle Authenticated users can create comments; authors can modify them.
     */
    match /posts/{postId}/comments/{commentId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update, delete: if isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Rule for the /users/{userId} collection.
     * @path /users/{userId}
     * @allow (get, list): Only the user themselves can read their profile. Listing all users is denied.
     * @allow (create): A user can create their own profile if the userId matches their auth UID.
     * @allow (update, delete): Only the user themselves can update or delete their profile.
     * @deny (create): A user cannot create a profile for another user.
     * @deny (update, delete): A user cannot update or delete another user's profile.
     * @principle Strict user-ownership for profile data.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update, delete: if isExistingOwner(userId);
    }

    /**
     * @description Rule for the /bottles/{bottleId} collection.
     * @path /bottles/{bottleId}
     * @allow (get, list): Any user can read any bottle message.
     * @allow (create): Any authenticated user can create a bottle message.
     * @allow (update, delete): Only the author of the bottle message can update or delete it.
     * @deny (create): Non-authenticated user cannot create a bottle message.
     * @deny (update, delete): A user cannot update or delete a bottle message they don't own.
     * @principle Public read, owner-only write access for bottle messages.
     */
    match /bottles/{bottleId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update, delete: if isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Rule for the /wallMessages/{messageId} collection.
     * @path /wallMessages/{messageId}
     * @allow (get, list): Any user can read any wall message.
     * @allow (create): Any authenticated user can create a wall message.
     * @allow (update, delete): Only the author of the wall message can update or delete it.
     * @deny (create): Non-authenticated user cannot create a wall message.
     * @deny (update, delete): A user cannot update or delete a wall message they don't own.
     * @principle Public read, owner-only write access for wall messages.
     */
    match /wallMessages/{messageId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update, delete: if isExistingOwner(resource.data.authorId);
    }
  }
}