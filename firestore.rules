/**
 * @fileoverview Firestore Security Rules for the campus social circle application.
 *
 * Core Philosophy:
 * This ruleset prioritizes user-generated content and public display, with owner-based write access.
 * Data is structured in top-level collections for Posts, Comments, UserProfiles, Bottles, and WallMessages.
 *
 * Data Structure:
 * - /posts/{postId}: Stores social posts.
 * - /comments/{commentId}: Stores comments on posts.
 * - /users/{userId}: Stores user profile information.
 * - /bottles/{bottleId}: Stores messages in bottles.
 * - /wallMessages/{messageId}: Stores public messages on the community wall.
 *
 * Key Security Decisions:
 * - Public Read Access: All collections allow public read access (`get`, `list`). This makes the app's content discoverable.
 * - Owner-Only Writes: Write operations (`create`, `update`, `delete`) are restricted to the owner of the document.
 *   For `posts`, `comments`, `bottles` and `wallMessages`, rules use `authorId` to determine ownership, requiring it is set during `create`.
 *   For `users` documents, rules enforce the authenticated user's ID matches the document ID to ensure self-creation and ownership.
 * - No User Listing: Listing all users is implicitly denied to protect privacy.
 *
 * Denormalization for Authorization:
 * - Ownership Field: The `authorId` field is used in `posts`, `comments`, `bottles` and `wallMessages` to simplify ownership checks.
 *   This avoids costly `get()` operations to a separate `/users/{userId}` document.
 *
 * Structural Segregation:
 * - Public Collections: Using top-level collections for public content (posts, comments, etc.) enables simple, performant rules for public read access.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read posts, but only the author can create, update, or delete them.
     * @path /posts/{postId}
     * @allow (get, list): Any user can read posts.
     * @allow (create): Authenticated user can create a post if `authorId` matches their `uid`.
     * @allow (update, delete): Only the author of the post can modify or delete it.
     * @deny (create): If the `authorId` does not match the authenticated user's `uid`.
     * @deny (update, delete): If the authenticated user is not the author of the post.
     * @principle Grants public read access with owner-only write access, using `authorId` for ownership.
     */
    match /posts/{postId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update, delete: if isSignedIn() && isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Allows anyone to read comments, but only the author can create, update, or delete them.
     * @path /comments/{commentId}
     * @allow (get, list): Any user can read comments.
     * @allow (create): Authenticated user can create a comment if `authorId` matches their `uid`.
     * @allow (update, delete): Only the author of the comment can modify or delete it.
     * @deny (create): If the `authorId` does not match the authenticated user's `uid`.
     * @deny (update, delete): If the authenticated user is not the author of the comment.
     * @principle Grants public read access with owner-only write access, using `authorId` for ownership.
     */
    match /comments/{commentId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update, delete: if isSignedIn() && isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Allows a user to create, read, update, and delete their own profile.
     * @path /users/{userId}
     * @allow (get): Any user can read any profile.
     * @allow (list): Listing all users is disallowed.
     * @allow (create): Authenticated user can create their own profile.
     * @allow (update, delete): Only the user can modify or delete their own profile.
     * @deny (create): If the `userId` does not match the authenticated user's `uid`.
     * @deny (update, delete): If the authenticated user is not the owner.
     * @principle Restricts access to a user's own data tree, validating `userId` on create.
     */
    match /users/{userId} {
      allow get: if true;
      allow list: if false;
      allow create: if isSignedIn() && userId == request.auth.uid;
      allow update, delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read bottles, but only the author can create, update, or delete them.
     * @path /bottles/{bottleId}
     * @allow (get, list): Any user can read bottles.
     * @allow (create): Authenticated user can create a bottle if `authorId` matches their `uid`.
     * @allow (update, delete): Only the author of the bottle can modify or delete it.
     * @deny (create): If the `authorId` does not match the authenticated user's `uid`.
     * @deny (update, delete): If the authenticated user is not the author of the bottle.
     * @principle Grants public read access with owner-only write access, using `authorId` for ownership.
     */
    match /bottles/{bottleId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update, delete: if isSignedIn() && isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Allows anyone to read wall messages, but only the author can create, update, or delete them.
     * @path /wallMessages/{messageId}
     * @allow (get, list): Any user can read wall messages.
     * @allow (create): Authenticated user can create a wall message if `authorId` matches their `uid`.
     * @allow (update, delete): Only the author of the wall message can modify or delete it.
     * @deny (create): If the `authorId` does not match the authenticated user's `uid`.
     * @deny (update, delete): If the authenticated user is not the author of the wall message.
     * @principle Grants public read access with owner-only write access, using `authorId` for ownership.
     */
    match /wallMessages/{messageId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update, delete: if isSignedIn() && isExistingOwner(resource.data.authorId);
    }

    // ---- Helper functions ----

    /**
     * @description Checks if the user is signed in.
     * @return {bool} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the document.
     * @param {string} userId The user ID to check against.
     * @return {bool} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the document and the document exists.
     * @param {string} userId The user ID to check against.
     * @return {bool} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}