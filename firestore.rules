/**
 * @fileOverview Firestore Security Rules for the campus social circle application.
 *
 * Core Philosophy:
 * This ruleset prioritizes security by enforcing strict ownership and authenticated access wherever possible.
 * Read access is generally open where appropriate, but write access is always restricted to authorized users.
 *
 * Data Structure:
 * - /posts/{postId}: Stores social media posts.
 * - /comments/{commentId}: Stores comments on posts.
 *
 * Key Security Decisions:
 * - Users must be authenticated to create, update, or delete any data.
 * - Data validation is relaxed in this prototype to allow for rapid iteration. However, ownership checks are strictly enforced on writes.
 * - List access to the /comments collection is granted to all users. This is acceptable because there are no personalized or private data in the collection that requires special ownership based rules.
 *
 * Denormalization for Authorization:
 * - The 'Post' and 'Comment' entities denormalize author information (authorId, authorName, authorAvatarId) directly onto each document to avoid costly `get()` calls in security rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to the 'posts' collection.
     * @path /posts/{postId}
     * @allow (get, list): Any user can read all posts.
     * @allow (create): Authenticated user can create a post with their authorId.
     * @allow (update, delete): Only the author of the post can update or delete it.
     * @deny (create): If the authorId does not match the request.auth.uid
     * @deny (update, delete): If the user is not the owner of the post.
     * @principle Public Read with Owner-Only Writes.
     */
    match /posts/{postId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update, delete: if isSignedIn() && isExistingOwner(resource.data.authorId);

    }

    /**
     * @description Controls access to the 'comments' collection.
     * @path /comments/{commentId}
     * @allow (get, list): Any user can read all comments.
     * @allow (create): Authenticated user can create a comment with their authorId.
     * @allow (update, delete): Only the author of the comment can update or delete it.
     * @deny (create): If the authorId does not match the request.auth.uid
     * @deny (update, delete): If the user is not the owner of the comment.
     * @principle Public Read with Owner-Only Writes.
     */
    match /comments/{commentId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update, delete: if isSignedIn() && isExistingOwner(resource.data.authorId);
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}