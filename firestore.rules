/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset prioritizes user data protection by implementing strict
 * ownership-based access control. Each user's data is secured, and only
 * the authenticated user has read and write access to their respective data
 * tree. Public read access is granted to specific collections where appropriate,
 * with owner-only restrictions on modifications.
 *
 * Data Structure:
 * The Firestore database is structured as follows:
 * - /posts/{postId}: Stores posts.
 * - /posts/{postId}/comments/{commentId}: Stores comments for each post.
 * - /users/{userId}: Stores user profile information.
 * - /bottles/{bottleId}: Stores messages in bottles.
 * - /wallMessages/{messageId}: Stores public messages on the community wall.
 *
 * Key Security Decisions:
 * - User-specific data (under `/users/{userId}`) is accessible only to the
 *   authenticated user.
 * - Public collections such as `posts`, `bottles`, and `wallMessages` allow
 *   unauthenticated read access (`get`, `list`), but write access is restricted
 *   to the owner of the resource.
 * - Listing of user documents (`/users`) is disallowed to protect user privacy.
 * - No data validation rules are enforced in this prototyping phase, except for
 *   authorization-critical fields such as `authorId` on creation.
 *
 * Denormalization for Authorization:
 *  - Posts, Bottles, and WallMessages have an `authorId` field that is used to
 *    verify ownership for write operations. This avoids the need for costly
 *    `get()` calls to a separate user document.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces owner-only access to user profiles.
     * @path /users/{userId}
     * @allow (create) User 'rQZNN1VeweMz0Lf2k0JT4Z7kFCx2' can create their own profile document at /users/rQZNN1VeweMz0Lf2k0JT4Z7kFCx2.
     * @deny (create) User 'attackerUID' cannot create a document at /users/rQZNN1VeweMz0Lf2k0JT4Z7kFCx2.
     * @allow (get) User 'rQZNN1VeweMz0Lf2k0JT4Z7kFCx2' can read their profile document at /users/rQZNN1VeweMz0Lf2k0JT4Z7kFCx2.
     * @deny (get) User 'attackerUID' cannot read the profile document at /users/rQZNN1VeweMz0Lf2k0JT4Z7kFCx2.
     * @allow (update) User 'rQZNN1VeweMz0Lf2k0JT4Z7kFCx2' can update their profile document at /users/rQZNN1VeweMz0Lf2k0JT4Z7kFCx2.
     * @deny (update) User 'attackerUID' cannot update the profile document at /users/rQZNN1VeweMz0Lf2k0JT4Z7kFCx2.
     * @allow (delete) User 'rQZNN1VeweMz0Lf2k0JT4Z7kFCx2' can delete their profile document at /users/rQZNN1VeweMz0Lf2k0JT4Z7kFCx2.
     * @deny (delete) User 'attackerUID' cannot delete the profile document at /users/rQZNN1VeweMz0Lf2k0JT4Z7kFCx2.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public reading of posts, but restricts modifications to the author.
     * @path /posts/{postId}
     * @allow (get) Any user can read a post.
     * @allow (list) Any user can list posts.
     * @allow (create) User 'rQZNN1VeweMz0Lf2k0JT4Z7kFCx2' can create a post if they are the author.
     * @deny (create) User 'attackerUID' cannot create a post with 'authorId' set to a different user.
     * @allow (update) User 'rQZNN1VeweMz0Lf2k0JT4Z7kFCx2' can update their own post.
     * @deny (update) User 'attackerUID' cannot update a post they don't own.
     * @allow (delete) User 'rQZNN1VeweMz0Lf2k0JT4Z7kFCx2' can delete their own post.
     * @deny (delete) User 'attackerUID' cannot delete a post they don't own.
     * @principle Allows public read access while enforcing owner-only writes.
     */
    match /posts/{postId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.authorId);
      allow delete: if isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Enforces that comments can be read by anyone, but only created by authenticated users, and only updated/deleted by the author.
     * @path /posts/{postId}/comments/{commentId}
     * @allow (get) Any user can read a comment.
     * @allow (list) Any user can list comments.
     * @allow (create) User 'rQZNN1VeweMz0Lf2k0JT4Z7kFCx2' can create a comment if signed in.
     * @deny (create) Anonymous user cannot create comments.
     * @allow (update) User 'rQZNN1VeweMz0Lf2k0JT4Z7kFCx2' can update their own comment.
     * @deny (update) User 'attackerUID' cannot update a comment they don't own.
     * @allow (delete) User 'rQZNN1VeweMz0Lf2k0JT4Z7kFCx2' can delete their own comment.
     * @deny (delete) User 'attackerUID' cannot delete a comment they don't own.
     * @principle Comments are publicly readable, but writes are restricted to the author.
     */
    match /posts/{postId}/comments/{commentId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isExistingOwner(resource.data.authorId);
      allow delete: if isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Allows public reading of bottles, but restricts modifications to the author.
     * @path /bottles/{bottleId}
     * @allow (get) Any user can read a bottle.
     * @allow (list) Any user can list bottles.
     * @allow (create) User 'rQZNN1VeweMz0Lf2k0JT4Z7kFCx2' can create a bottle if they are the author.
     * @deny (create) User 'attackerUID' cannot create a bottle with 'authorId' set to a different user.
     * @allow (update) User 'rQZNN1VeweMz0Lf2k0JT4Z7kFCx2' can update their own bottle.
     * @deny (update) User 'attackerUID' cannot update a bottle they don't own.
     * @allow (delete) User 'rQZNN1VeweMz0Lf2k0JT4Z7kFCx2' can delete their own bottle.
     * @deny (delete) User 'attackerUID' cannot delete a bottle they don't own.
     * @principle Allows public read access while enforcing owner-only writes.
     */
    match /bottles/{bottleId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.authorId);
      allow delete: if isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Allows public reading of wall messages, but restricts modifications to the author.
     * @path /wallMessages/{messageId}
     * @allow (get) Any user can read a wall message.
     * @allow (list) Any user can list wall messages.
     * @allow (create) User 'rQZNN1VeweMz0Lf2k0JT4Z7kFCx2' can create a wall message if they are the author.
     * @deny (create) User 'attackerUID' cannot create a wall message with 'authorId' set to a different user.
     * @allow (update) User 'rQZNN1VeweMz0Lf2k0JT4Z7kFCx2' can update their own wall message.
     * @deny (update) User 'attackerUID' cannot update a wall message they don't own.
     * @allow (delete) User 'rQZNN1VeweMz0Lf2k0JT4Z7kFCx2' can delete their own wall message.
     * @deny (delete) User 'attackerUID' cannot delete a wall message they don't own.
     * @principle Allows public read access while enforcing owner-only writes.
     */
    match /wallMessages/{messageId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.authorId);
      allow delete: if isExistingOwner(resource.data.authorId);
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isSignedIn() && request.auth.uid == userId && resource != null;
    }
  }
}