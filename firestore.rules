/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes rapid prototyping by focusing on authorization while relaxing data validation.
 * It enforces user-based ownership for write operations and allows public read access where appropriate.
 *
 * Data Structure:
 * - /posts/{postId}: Publicly readable posts, owned by a user.
 * - /comments/{commentId}: Publicly readable comments, associated with posts.
 *
 * Key Security Decisions:
 * - Public read access is granted to posts and comments to enable open discovery.
 * - Write access (create, update, delete) to posts and comments is restricted to the owner.
 * - Data validation is minimized to accelerate development, but critical authorization fields are validated.
 *
 * Denormalization for Authorization:
 * - Posts and Comments both have `authorId` to enable efficient ownership checks without needing additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read posts, but only the author can create, update, or delete them.
     * @path /posts/{postId}
     * @allow (get, list): Any user can read posts.
     * @allow (create): The user whose auth UID matches the post's authorId can create a post.
     * @allow (update, delete): The user whose auth UID matches the post's authorId can update or delete the post.
     * @deny (create): A user attempts to create a post with an authorId that doesn't match their own UID.
     * @deny (update, delete): A user attempts to update or delete a post they don't own.
     * @principle Public read with owner-only writes, enforcing document ownership for writes.
     */
    match /posts/{postId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update, delete: if isSignedIn() && isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Allows anyone to read comments, but only the author can create, update, or delete them.
     * @path /comments/{commentId}
     * @allow (get, list): Any user can read comments.
     * @allow (create): The user whose auth UID matches the comment's authorId can create a comment.
     * @allow (update, delete): The user whose auth UID matches the comment's authorId can update or delete the comment.
     * @deny (create): A user attempts to create a comment with an authorId that doesn't match their own UID.
     * @deny (update, delete): A user attempts to update or delete a comment they don't own.
     * @principle Public read with owner-only writes, enforcing document ownership for writes.
     */
    match /comments/{commentId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update, delete: if isSignedIn() && isExistingOwner(resource.data.authorId);
    }


    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}