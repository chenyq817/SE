/**
 * @file firestore.rules
 * @description Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset prioritizes user-generated content access control. Users own their posts and comments. Public profile information is accessible.
 *
 * Data Structure:
 * - /posts/{postId}: Stores social media posts.
 * - /comments/{commentId}: Stores comments on posts.
 * - /users/{userId}: Stores public user profiles.
 *
 * Key Security Decisions:
 * - Posts can only be created, updated, or deleted by their authors.
 * - Comments can only be created, updated, or deleted by their authors.
 * - Public user profiles are readable by everyone, but only updatable by the user themselves.
 * - Listing of users is disallowed.
 *
 * Denormalization for Authorization:
 * - The `posts` and `comments` collections require that each document contains the `authorId` so the rules can enforce ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided userId.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the existing document.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for the /posts collection.
     * @path /posts/{postId}
     * @allow (create) User with auth.uid "user_abc" creates a new post with authorId "user_abc".
     * @deny (create) User with auth.uid "user_xyz" tries to create a new post with authorId "user_abc".
     * @principle Enforces document ownership for writes.
     */
    match /posts/{postId} {
      // Anyone can read posts
      allow get, list: if true;

      // Only the post author can create, update, or delete
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.authorId);
      allow delete: if isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Rules for the /comments collection.
     * @path /comments/{commentId}
     * @allow (create) User with auth.uid "user_abc" creates a new comment with authorId "user_abc".
     * @deny (create) User with auth.uid "user_xyz" tries to create a new comment with authorId "user_abc".
     * @principle Enforces document ownership for writes.
     */
    match /comments/{commentId} {
      // Anyone can read comments
      allow get, list: if true;

      // Only the comment author can create, update, or delete
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.authorId);
      allow delete: if isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Rules for the /users collection.
     * @path /users/{userId}
     * @allow (get) Any user can retrieve a user profile.
     * @allow (update) User with auth.uid "user_abc" updates their own profile (userId "user_abc").
     * @deny (update) User with auth.uid "user_xyz" tries to update the profile of user "user_abc".
     * @principle Enforces document ownership for updates.
     */
    match /users/{userId} {
      // Anyone can read user profiles
      allow get: if true;
      allow list: if false;

      // Only the user can update their own profile
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if false;
    }
  }
}