/**
 * @file Firestore Security Rules
 * @description This ruleset is in **Prototyping Mode**, data shape validation will be skipped. Authorization is enforced.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure authorization while allowing flexible data shapes for rapid prototyping.
 * It enforces user-ownership where applicable and allows public read access where appropriate.
 *
 * Data Structure:
 * - /posts/{postId}: Stores posts created by users.
 * - /posts/{postId}/comments/{commentId}: Stores comments for each post.
 * - /users/{userId}: Stores user profile data.
 * - /bottles/{bottleId}: Stores messages in bottles.
 * - /wallMessages/{messageId}: Stores public messages on the community wall.
 *
 * Key Security Decisions:
 * - User listing is generally disallowed to protect user privacy.
 * - Data validation is minimal during the prototyping phase, focusing on authorization.
 * - Where possible, an owner-only access control pattern is used
 * - To allow any user to create comments (even unauthenticated users), public create access is enabled for the comments collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read all posts. Only the post author can modify or delete a post.
     * @path /posts/{postId}
     * @allow (get, list): Any user can read all posts.
     * @allow (create): Only if the authorId matches the authenticated user's ID.
     * @allow (update, delete): Only if the user is the author of the post.
     * @deny   (create): If the authorId does not match the authenticated user's ID.
     * @deny   (update, delete): If the user is not the author of the post.
     * @principle Enforces owner-only writes for posts, public read access.
     */
    match /posts/{postId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update, delete: if isSignedIn() && isExistingOwner(resource.data.authorId);
    }

    /**
     * @description Allows any user to create a comment under any post.
     * @path /posts/{postId}/comments/{commentId}
     * @allow (get, list): Any user can read all comments.
     * @allow (create): Any user can create a comment.
     * @deny (update, delete): No one can update or delete a comment.
     * @principle Public access to comments with no modification allowed.
     */
    match /posts/{postId}/comments/{commentId} {
      allow get: if true;
      allow list: if true;
      allow create: if true;
      allow update, delete: if false;
    }

    /**
     * @description Allows a user to read and write their own profile data.
     * @path /users/{userId}
     * @allow (get): Any user can read any profile.
     * @allow (create): Only if the user ID matches the authenticated user's ID (self-registration).
     * @allow (update, delete): Only if the user is updating/deleting their own profile.
     * @deny (create): If the user ID does not match the authenticated user's ID.
     * @deny (update, delete): If the user is not updating/deleting their own profile.
     * @principle Enforces user-ownership for profile data.
     */
    match /users/{userId} {
      allow get: if true;
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update, delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read messages, and any signed in user to create.
     * @path /bottles/{bottleId}
     * @allow (get, list): Any user can read all messages.
     * @allow (create): Any signed in user can create a message.
     * @allow (update, delete): Only the author can update or delete a message.
     * @deny (create): If not authenticated
     * @deny (update, delete): If the user is not the author.
     * @principle Public read access to messages, owner-only writes.
     */
    match /bottles/{bottleId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update, delete: if isSignedIn() && isExistingOwner(resource.data.authorId);
    }

   /**
     * @description Allows anyone to read wall messages, and any signed in user to create. Only the author can update or delete.
     * @path /wallMessages/{messageId}
     * @allow (get, list): Any user can read all wall messages.
     * @allow (create): Any signed in user can create a wall message.
     * @allow (update, delete): Only the author can update or delete a wall message.
     * @deny (create): If not authenticated.
     * @deny (update, delete): If the user is not the author.
     * @principle Public read access to wall messages, owner-only writes.
     */
    match /wallMessages/{messageId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.authorId == request.auth.uid;
      allow update, delete: if isSignedIn() && isExistingOwner(resource.data.authorId);
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
  }
}